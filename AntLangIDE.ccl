var IDE_VERSION = "2017.01.27";

//Standard libraries
#include ccl/jui/JUI.cl2
#include ccl/jui/Launcher.cl2
#include ccl/jui/XYChart.cl2
#include <Console>
#include <io/File>

//CoaFX framework
#include "F:/Info/CCL/CoaFX/webLib.ccl"

//JavaFX classes
var ObjectProperty = java("javafx.beans.property.SimpleObjectProperty");
var StringProperty = java("javafx.beans.property.SimpleStringProperty");
var ClipboardContent = java("javafx.scene.input.ClipboardContent");
var Clipboard = java("javafx.scene.input.Clipboard");
var NumberAxis = JUI.chart("NumberAxis");

def onInputChange(cdf){
	var antResult = eval.ant(cdf.getValue().get(0).getValue());
	if(antResult.type == "unknown"){
		antResult = "{}";
	}
	cdf.getValue().get(1).setValue(antResult);
}

def textFieldFactory(cdf){
	var tf = JUI.control("TextField")();
	tf.textProperty().bindBidirectional(
		cdf.getValue().get(0)
	);
	tf.textProperty().addListener(
		onInputChange.bind(cdf)
	);
	
	return ObjectProperty(tf);
}

def makeItem(){
	return [
		calc:StringProperty(""),
		result:ObjectProperty()
	];
}

def sendToClipboard(txt){
	var content = ClipboardContent();
	content.putString(txt);
	Clipboard.getSystemClipboard().setContent(content);
}

def makeCharButton(c){
	var buttonText = c.toString();
	return JUI.control("Button")(
		buttonText,
		"onAction" => sendToClipboard.bind(buttonText)
	);
}

def makeButtonBar(table){
	var newRow = JUI.control("Button")(
		"add row",
		"onAction" => <|table.getItems().add(makeItem())>
	);
	
	var hbox = JUI.layout("HBox")([
		newRow
	]);
	
	var charFile = File("antChars.txt");
	if(charFile.exists()){
		var content = charFile.buildString("UTF-8");
		content = content.replace(" ", "");
		hbox.getChildren().add.for(makeCharButton.for(
			array(content.toCharArray())
		));
	}
	
	return hbox;
}

def addSeries(chart, antLangCode){
	var func = eval.ant(antLangCode);
	if(func.type == "unknown"){
		if(func(integer("-100")).type == "error"){return;}
		chart.getData().add(
			XYSeries(
				<x|x>, func, integer("-100"), 100,
				antLangCode
			)
		);
	}
}

def onChartTabSelection(tab, table){
	if(tab.isSelected()){
		tab.setContent(JUI.control("Label")("Rendering..."));
		var chart = JUI.chart("LineChart")(NumberAxis(), NumberAxis());
		addSeries.bind(chart).for(
			<i|i.get(0).getValue()>.for(
				array(table.getItems().toArray())
			)
		);
		tab.setContent(chart);
	}
}

def start(stage){
	
	stage.show();
	stage.setTitle("Downloading AntLang...");
	#include ccl/eval/AntLang.cl2
	
	stage.setTitle("AntLangIDE v" & IDE_VERSION);
	
	var table = JUI.control("TableView")();
	var inputColumn = JUI.control("TableColumn")("Input");
	var outputColumn = JUI.control("TableColumn")("Result");
	
	inputColumn.setCellValueFactory(textFieldFactory.bind());
	table.getColumns().add(inputColumn);
	
	outputColumn.setCellValueFactory(<cdf|cdf.getValue().get(1)>);
	table.getColumns().add(outputColumn);
	
	table.getItems().add(makeItem());
	
	var chartTab = JUI.control("Tab")(
		"Chart"
	);
	chartTab.selectedProperty().addListener(
		onChartTabSelection.bind(chartTab, table)
	);
	
	var onlineIDE = Web("https://antlang-software.github.io/jsAntLang/");
	
	stage.setScene(
		JUI.Scene(
			JUI.control("TabPane")([
				JUI.control("Tab")(
					"Table",
					JUI.layout("BorderPane")(
						"center" => table,
						"bottom" => makeButtonBar(table)
					)
				),
				chartTab,
				JUI.control("Tab")(
					"Web",
					onlineIDE
				)
			])
		)
	);
}

Launcher().launch(start, []);